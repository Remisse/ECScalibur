@startuml

!theme vibrant

interface World <<interface>> {
  ~am: ArchetypeManager
  context: MetaContext
  mutator: Mutator
  entity(): EntityBuilder 
  hasComponents(e: Entity, types: List[ComponentType]): Bool
  loop(loopType: Loop)
}

interface Loop <<interface>>

interface MetaContext <<interface>> {
  deltaTime: DeltaSeconds
}

interface Mutator <<interface>> {
  defer(r: DeferredRequest): Bool
  doImmediately(r: ImmediateRequest): Bool
}

interface DeferredRequest <<interface>>
interface ImmediateRequest <<interface>>

interface ArchetypeManager <<interface>>

interface EntityBuilder <<interface>> {
  withComponents(c: Set[Component])
}

World "1" *-- "1" MetaContext
World "1" *-- "1" Mutator
World "1" *-- "1" ArchetypeManager
World -> Loop
EntityBuilder <- World : makes Entities with
Mutator --> DeferredRequest : defers
Mutator --> ImmediateRequest : processes immediately

hide interface circle
hide empty members

@enduml