package ecsutil

/** Models a factory of unique, recyclable [[Int]] IDs.
  */
trait IdGenerator:
  /** Returns the next available ID. If any previously generated IDs have been erased, this
    * IdGenerator will recycle them first before generating new ones.
    *
    * @return
    *   the next available ID
    */
  def next: Int

  /** Erases a previously generated ID.
    *
    * @param id
    *   the ID to be erased
    * @return
    *   true if the ID is valid and has been erased, false otherwise
    */
  def erase(id: Int): Boolean

  /** Checks whether the given ID is valid, that is, if it has been generated by this IdGenerator
    * and if it has not been erased.
    *
    * @param id
    *   the ID to test
    * @return
    *   true if the given ID is valid, false otherwise
    */
  def isValid(id: Int): Boolean

/** Factory for [[IdGenerator]].
  */
object IdGenerator:
  /** @return
    *   a new IdGenerator instance
    */
  def apply(): IdGenerator = new IdGenerator:
    import scala.collection.mutable

    private var highestAvailableIdx = 0
    private val erasedIds = mutable.HashSet.empty[Int]

    override def next: Int =
      erasedIds.isEmpty match
        case true =>
          val res = highestAvailableIdx
          highestAvailableIdx = highestAvailableIdx + 1
          res
        case _ =>
          val res = erasedIds.head
          erasedIds -= res
          res

    override def erase(id: Int): Boolean =
      if isValid(id) then
        erasedIds += id
        return true
      false

    override def isValid(id: Int): Boolean =
      id >= 0 && id < highestAvailableIdx && !erasedIds.contains(id)
